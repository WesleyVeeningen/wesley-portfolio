#!/bin/bash
set -eo pipefail
source "$(dirname "$0")"/../config/environment

if [ -f "$(dirname "$0")"/../config/environment.local ]; then
    source "$(dirname "$0")"/../config/environment.local
fi

saved=$@
scriptname=$0
mode=connect
for incr in "$@"
do
    case $incr in
        -c|--config)
        mode=check_config
        shift # past argument=value
        ;;
        -r=*|--remote=*)
        remote="${i#*=}"
        shift # past argument=value
        ;;
        -r)
        remote="$2"
        skip_next=1
        shift
        ;;
        *)
        if [ "$skip_next" == "1" ]; then
            skip_next=0;
            shift
            continue;
        fi
        break
        ;;
    esac
done
# Reset $@
comm=$@
set -- $saved

# https://github.com/mrbaseman/parse_yaml
# Note, dont use $fs or $i in global scope
function parse_yaml {
   y=''
   while IFS= read -r data; do
      y=$y$data$'\n'
   done
   local prefix=$1
   local separator=${2:-_}
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=${fs:-$(echo @|tr @ '\034')} i=${i:-  }
   echo "$y" | \
   awk -F$fs "{multi=0;
       if(match(\$0,/$s\|$s\$/)){multi=1; sub(/$s\|$s\$/,\"\");}
       if(match(\$0,/$s>$s\$/)){multi=2; sub(/$s>$s\$/,\"\");}
       while(multi>0){
           str=\$0; gsub(/^$s/,\"\", str);
           indent=index(\$0,str);
           indentstr=substr(\$0, 0, indent-1) \"$i\";
           obuf=\$0;
           getline;
           while(index(\$0,indentstr)){
               obuf=obuf substr(\$0, length(indentstr)+1);
               if (multi==1){obuf=obuf \"\\\\n\";}
               if (multi==2){
                   if(match(\$0,/^$s\$/))
                       obuf=obuf \"\\\\n\";
                       else obuf=obuf \" \";
               }
               getline;
           }
           sub(/$s\$/,\"\",obuf);
           print obuf;
           multi=0;
           if(match(\$0,/$s\|$s\$/)){multi=1; sub(/$s\|$s\$/,\"\");}
           if(match(\$0,/$s>$s\$/)){multi=2; sub(/$s>$s\$/,\"\");}
       }
   print}" | \
   sed  -e "s|^\($s\)?|\1-|" \
       -ne "s|^$s#.*||;s|$s#[^\"']*$||;s|^\([^\"'#]*\)#.*|\1|;t1;t;:1;s|^$s\$||;t2;p;:2;d" | \
   sed -ne "s|,$s\]$s\$|]|" \
        -e ":1;s|^\($s\)\($w\)$s:$s\(&$w\)\?$s\[$s\(.*\)$s,$s\(.*\)$s\]|\1\2: \3[\4]\n\1$i- \5|;t1" \
        -e "s|^\($s\)\($w\)$s:$s\(&$w\)\?$s\[$s\(.*\)$s\]|\1\2: \3\n\1$i- \4|;" \
        -e ":2;s|^\($s\)-$s\[$s\(.*\)$s,$s\(.*\)$s\]|\1- [\2]\n\1$i- \3|;t2" \
        -e "s|^\($s\)-$s\[$s\(.*\)$s\]|\1-\n\1$i- \2|;p" | \
   sed -ne "s|,$s}$s\$|}|" \
        -e ":1;s|^\($s\)-$s{$s\(.*\)$s,$s\($w\)$s:$s\(.*\)$s}|\1- {\2}\n\1$i\3: \4|;t1" \
        -e "s|^\($s\)-$s{$s\(.*\)$s}|\1-\n\1$i\2|;" \
        -e ":2;s|^\($s\)\($w\)$s:$s\(&$w\)\?$s{$s\(.*\)$s,$s\($w\)$s:$s\(.*\)$s}|\1\2: \3 {\4}\n\1$i\5: \6|;t2" \
        -e "s|^\($s\)\($w\)$s:$s\(&$w\)\?$s{$s\(.*\)$s}|\1\2: \3\n\1$i\4|;p" | \
   sed  -e "s|^\($s\)\($w\)$s:$s\(&$w\)\(.*\)|\1\2:\4\n\3|" \
        -e "s|^\($s\)-$s\(&$w\)\(.*\)|\1- \3\n\2|" | \
   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\(---\)\($s\)||" \
        -e "s|^\($s\)\(\.\.\.\)\($s\)||" \
        -e "s|^\($s\)-$s[\"']\(.*\)[\"']$s\$|\1$fs$fs\2|p;t" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p;t" \
        -e "s|^\($s\)-$s\(.*\)$s\$|\1$fs$fs\2|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\?\(.*\)$s\$|\1$fs\2$fs\3|" \
        -e "s|^\($s\)[\"']\?\([^&][^$fs]\+\)[\"']$s\$|\1$fs$fs$fs\2|" \
        -e "s|^\($s\)[\"']\?\([^&][^$fs]\+\)$s\$|\1$fs$fs$fs\2|" \
        -e "s|$s\$||p" | \
   awk -F$fs "{
      gsub(/\t/,\"        \",\$1);
      if(NF>3){if(value!=\"\"){value = value \" \";}value = value  \$4;}
      else {
        if(match(\$1,/^\&/)){anchor[substr(\$1,2)]=full_vn;getline};
        indent = length(\$1)/length(\"$i\");
        vname[indent] = \$2;
        value= \$3;
        for (i in vname) {if (i > indent) {delete vname[i]; idx[i]=0}}
        if(length(\$2)== 0){  vname[indent]= ++idx[indent] };
        vn=\"\"; for (i=0; i<indent; i++) { vn=(vn)(vname[i])(\"$separator\")}
        vn=\"$prefix\" vn;
        full_vn=vn vname[indent];
        if(vn==\"$prefix\")vn=\"$prefix$separator\";
        if(vn==\"_\")vn=\"__\";
      }
      assignment[full_vn]=value;
      if(!match(assignment[vn], full_vn))assignment[vn]=assignment[vn] \" \" full_vn;
      if(match(value,/^\*/)){
         ref=anchor[substr(value,2)];
         for(val in assignment){
            if(index(val, ref)==1){
               tmpval=assignment[val];
               sub(ref,full_vn,val);
               if(match(val,\"$separator\$\")){
                  gsub(ref,full_vn,tmpval);
               } else if (length(tmpval) > 0) {
                  printf(\"%s=\\\"%s\\\"\n\", val, tmpval);
               }
               assignment[val]=tmpval;
            }
         }
      } else if (length(value) > 0) {
         printf(\"%s=\\\"%s\\\"\n\", full_vn, value);
      }
   }END{
      for(val in assignment){
         if(match(val,\"$separator\$\"))
            printf(\"%s=\\\"%s\\\"\n\", val, assignment[val]);
      }
   }"
}

function check_config {
    echo "Config:"
    ( set -o posix ; set )|grep "^$prefix"|sed "s/$prefix//g"
    echo ""
    echo "Found remotes: "$remotes
    echo "Using $remote."
    echo "Command: $comm"
}

function remote_var {
    local key="${prefix}remotes_${remote}_$1"
    echo ${!key}
}

function connect {
    echo "Using $remote."

    wrapper_comm='exec $SHELL -i -c --'
    if [[ "$(remote_var change_user_to)" != "" ]]; then
        wrapper_comm="sudo -- su $(remote_var change_user_to) -c";
    fi
    comm='cd '$(remote_var directory)';$SHELL'
    if [[ "" != "$@" ]]; then comm="cd $(remote_var directory);export PATH=$(remote_var directory)/docker/bin:\$PATH;$@"; fi
    ssh -t $(remote_var hostname) "${wrapper_comm} '${comm}'"
}

prefix="REMOTES_"
key=$prefix"remotes_"
remotes=""

# Read yml files.
[ -f "$(dirname $scriptname)/../config/remotes.yml" ] && eval $(cat $(dirname $scriptname)/../config/remotes.yml | parse_yaml $prefix)
for remote_found in ${!key}; do
   r=${remote_found:${#key}}
   [ -n ${r} ] && remotes=$remotes$r" "
done;
[ -f "$(dirname $scriptname)/../config/remotes.local.yml" ] && eval $(cat $(dirname $scriptname)/../config/remotes.local.yml | parse_yaml $prefix)
for remote_found in ${!key}; do
   r=${remote_found:${#key}}
   [ -n ${r} ] && [ -z "$(echo $remotes|grep $r)" ] && remotes=$remotes$r" "
done;
[ -z "$remotes" ] || remotes=${remotes:0:-1} #remove trailing space

if [ -z "$remotes" ]; then echo "Error: no remotes defined."; exit 1; fi

# find selected remote
if [ -z $remote ]; then
    remotes_arr=( $remotes );
    remote=${remotes_arr[0]};
    key=$prefix"default"
    if [ -n "${!key}" ]; then
        if [ -n "$(echo $remotes|grep -w ${!key})" ]; then
            remote="${!key}";
        else
            echo "Error: default remote '${!key}' not defined.";
            exit 2
        fi
    fi
else
    if [ -z "$(echo $remotes|grep -w ${remote})" ]; then
        echo "Error: remote '${remote}' not defined.";
        exit 3
    fi
fi

#run command
if [ "$mode" == "check_config" ]; then
    check_config;
    exit 0;
fi
$mode $comm;
